
1. Архитектура и технологии
Backend: Python + Flask
База данных: SQLite (локально)
ORM: SQLAlchemy (для удобства работы с БД)
Авторизация: Flask-Login (для сессий и пользователей)
Шаблоны: Jinja2 (встроено во Flask)
Тесты: pytest
CI: GitHub Actions для автоматического запуска тестов при коммите

2. Функционал проекта
2.1. Пользователи и авторизация
Регистрация пользователей (email + пароль)
Вход/выход из системы (сессии)
Проверка доступа: пользователь может видеть и управлять только своими сокращёнными ссылками

2.2. Сокращение ссылок
Форма для ввода длинной ссылки
Генерация уникального короткого ключа
Возможность указать кастомный короткий ключ (если он свободен)
Сохранение в БД: {id, пользователь, длинная ссылка, короткий ключ, дата создания}

2.3. Перенаправление по короткой ссылке
При переходе по /<short_key> происходит редирект на длинную ссылку
Ведение статистики переходов (дата, IP, user-agent)
Обновление счётчика переходов для каждой ссылки

2.4. Личный кабинет пользователя
Список всех его ссылок с количеством переходов
Статистика по каждой ссылке (график или таблица с датами и количеством переходов)
Возможность удалить или редактировать ссылки

3. Структура проекта
lua
Copy
Edit
/shortener
  |-- app.py                 # основной запуск приложения
  |-- models.py              # модели БД: User, Link, Click
  |-- auth.py                # маршруты и логика авторизации
  |-- shortener.py           # маршруты для создания и редиректа ссылок
  |-- stats.py               # маршруты для статистики
  |-- templates/             # HTML шаблоны
        |-- base.html
        |-- index.html
        |-- login.html
        |-- register.html
        |-- dashboard.html
        |-- stats.html
  |-- static/                # стили и скрипты
  |-- tests/                 # тесты проекта
        |-- test_auth.py
        |-- test_shortener.py
        |-- test_stats.py
  |-- requirements.txt       # зависимости
  |-- .github/workflows/
        |-- python-app.yml   # CI для GitHub Actions
4. Детали реализации
4.1. Модели (models.py)
User: id, email, hashed_password, дата регистрации

Link: id, user_id (FK), original_url, short_key, created_at

Click: id, link_id (FK), timestamp, ip_address, user_agent

4.2. Основные маршруты
Маршрут	Метод	Описание
/register	GET/POST	Регистрация пользователя
/login	GET/POST	Вход пользователя
/logout	GET	Выход из системы
/	GET	Главная страница с формой сокращения
/shorten	POST	Обработка сокращения ссылки
/dashboard	GET	Личный кабинет пользователя
/stats/<short_key>	GET	Статистика по ссылке
/<short_key>	GET	Перенаправление на оригинальный URL

4.3. Логика генерации короткого ключа
Проверка на уникальность

Возможность кастомного ключа (валидировать и проверять свободен ли)

4.4. Авторизация
Регистрация и хранение пароля с хешированием (bcrypt)

Защита маршрутов личного кабинета и создания ссылок

Использование Flask-Login для управления сессиями

4.5. Статистика переходов
При переходе по короткой ссылке сохранять:
Время перехода
IP пользователя (через request.remote_addr)
User-Agent (request.headers['User-Agent'])
В личном кабинете показывать общее количество переходов и детализацию

5. Тестирование и автоматизация
5.1. Тесты с pytest
Тесты для регистрации, входа и выхода пользователя
Тесты для создания ссылок (короткие ключи, кастомные ключи)
Тесты перенаправления по короткой ссылке
Тесты сбора статистики

5.2. Автоматический запуск тестов при коммите (GitHub Actions)
Создать файл .github/workflows/python-app.yml с конфигурацией:

yaml
Copy
Edit
name: Python application

on: [push, pull_request]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.10
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest
    - name: Run tests
      run: |
        pytest tests/
